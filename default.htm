<html>

  <head>

    <meta name="author" content="Harvey Lelliott">

    <title>
      Mini UoM Linux
    </title>

    <!-- This loads the font that UOM Linux uses -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Cantarell:wght@400;700&display=swap" rel="stylesheet">

  </head>

  <!-- This is where the magic happens -->
  <script>

    // This script sets up the onclick and dragging of desktop icons, opens
    // the welcome screen, and starts the loop that keeps the clock updated
    function onLoad() {

      //so we only run scripts when everything is loaded
      if(document.readyState == "complete") {
       
        console.log("Loading!");

        if(/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
          alert("Functionality is limited on mobile browsers!");
        }
        let desktopIcons = document.getElementsByClassName("desktopIcon");

        for(i=0; i < desktopIcons.length; i++) {

          // Path is the directory of the folder/file that would open if clicked
          let path = desktopIcons[i].getAttribute("path");

          console.log("an icon on the desktop is being setup with the path: " + path);

          // This sets up the object so that it can be dragged
          // The first argument is the object that is to be moved
          // The second argument is the area in which if we click and hold we can drag the object
          dragElement(desktopIcons[i], desktopIcons[i]);

          // Mobile browsers do not support double clicks, so it has to be a single click
          let eventName = "dblclick";
          if(/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
            eventName = "click";
          }

          // This sets up the double click to open folder/file
          desktopIcons[i].addEventListener(eventName, function(event) {

            path = event.target.parentNode.getAttribute("path");
            console.log("An icon was double clicked on the desktop: " + path);

            // If the path has a "." then it must be a file
            if(path.includes(".")) {
              openFile(path);
            } else {
              newExplorerWindow(path);
            }
          });
        }
        // This runs updateClock() every 1000 milliseconds
        setInterval(updateClock, 1000);

        // Opens the welcome page
        newWelcomePage();
      }
    }


    // This function updates the clock
    function updateClock() {
      let clock = document.getElementById("systemClock");
      let date = new Date();
      let day = date.getDay();
      let dayString = "";
      switch(day) {
        case(0):
          dayString = "Sun";
          break;
        case(1):
          dayString = "Mon";
          break;
        case(2):
          dayString = "Tue";
          break;
        case(3):
          dayString = "Wed";
          break;
        case(4):
          dayString = "Thu";
          break;
        case(5):
          dayString = "Fri";
          break;
        case(6):
          dayString = "Sat";
          break;
      }
      time = date.toTimeString().substring(0, 5);
      clock.innerHTML = dayString + " " + time;
    }


    // This function finds the highest z index out of all windows.
    // This information is needed to help put windows in "focus" above
    // other windows when clicked
    function findHighestZIndex() {
      // Gets all of the windows
      let windowElements = document.getElementsByClassName("draggableWindow");
      let highest = 0;
      for(let i=0; i < windowElements.length; i++) {
        if(windowElements[i].style.zIndex > highest){
          highest = parseInt(windowElements[i].style.zIndex);
        }
      }
      console.log("Highest Z-Index: " + highest);
      return highest;
    }


    // This puts the window in-front of everything else and also makes sure that it is visible
    function focusWindow(windowID) {
      let windowToFocus = document.getElementById(windowID);
      console.log("will be made in focus: " + windowID);
      windowToFocus.style.zIndex = findHighestZIndex() + 1;
      windowToFocus.style.display = "block";
    }


    // This opens a new file manager at the given path
    function newExplorerWindow(path) {
      let menuBarTitle = document.createElement("div");
      let programContent = "explorer.html";
      // The directory that the file explorer should go to is given in program arguments
      let programArguments = "directory=" + path;
      // This generates the navigation buttons in the top left of the file explorer
      let menuBarButtons = generateNavigationButtons("/", "");
      // This makes a new window
      const id = newWindow(menuBarButtons, menuBarTitle, programContent, programArguments);
      // This makes a new taskbar entry for the program
      newTask("resources/system-file-manager.png", "File Manager", id);
    }


    // This maps filenames that end in .url to URLs
    function findURL(path) {
      switch(path) {
        case("/YouTube.url"):
          return "https://www.youtube.com/embed/dQw4w9WgXcQ?autoplay=1&mute=1";
          break;
        case("/Weather/Lightning.url"):
          return "https://map.blitzortung.org/index.php?interactive=1&NavigationControl=1&FullScreenControl=0&Cookies=0&InfoDiv=1&MenuButtonDiv=1&ScaleControl=1&LinksCheckboxChecked=1&LinksRangeValue=5&MapStyle=2&MapStyleRangeValue=5&Advertisment=0#3/40/15";
          break;
        case("/Weather/Radar.url"):
          return "https://embed.windy.com/embed2.html?lat=54.419&lon=-3.735&detailLat=51.496&detailLon=-0.122&width=650&height=450&zoom=5&level=surface&overlay=radar&product=radar&menu=&message=&marker=&calendar=now&pressure=true&type=map&location=coordinates&detail=&metricWind=km%2Fh&metricTemp=%C2%B0C&radarRange=-1";
          break;
        case("/Weather/Satellite.url"):
          return "https://view.eumetsat.int/productviewer?v=default";
          break;
        case("/debug/http_test.url"):
          return "http://www.httpvshttps.com/";
          break;
        case("/debug/https_test.url"):
          return "https://www.httpvshttps.com/";
          break;
        case("/Videos/Tour of Campus.url"):
          return "https://www.youtube.com/embed/0hupzarPMEo";
          break;
        case("/Key Dates.url"):
          return "https://www.manchester.ac.uk/discover/key-dates/";
          break;
        case("/Music/Hacking Music.mp3"):
          document.getElementById("main").style.backgroundImage = "url('resources/alt-wallpaper.jpg')"; // a little easter egg
          return "https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/707170303&color=%23ff5500&auto_play=true&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true&visual=true";
          break;
        case("/Music/Crab Rave.mp3"):
          return "https://www.youtube.com/embed/LDU_Txk06tM?autoplay=1&mute=1";
          break;
        case("/Pathways/Computer Science.url"):
          return "https://www.cs.manchester.ac.uk/";
          break;
        case("/Videos/Welcome video.url"):
          return "https://www.youtube.com/embed/9foPV3IGWhY";
          break;
        case("/Videos/Random youtube lectures.url"):
          return "https://www.youtube.com/embed/watch?v=enSXh4YY9Ws&list=RDCMUCb8fvnW_oO5EsjV1X3ENS6g&start_radio=1";
          break;
      }
    }


    // These are used to tell the web browser what its previous page was
    var lastBrowserFrame = "";
    var nextBrowserFrame = "";


    // This creates a new web browser window given the path of a file
    function newBrowserWindow(path) {
      //there is sometimes an issue where there are too many /'s
      path = path.replaceAll("//", "/");
      console.log("The path given to the browser is: " + path);
      let url = findURL(path);
      console.log("URL to navigate to: " + url);

      // This creates the back button image and makes it go back when clicked
      let menuBarButtonsBackIcon = document.createElement("img");
      menuBarButtonsBackIcon.src = "resources/go-previous-symbolic.svg";
      menuBarButtonsBackIcon.width = 20;
      menuBarButtonsBackIcon.height = 20;
      menuBarButtonsBackIcon.onclick = function(event) {
        let localId = findId(event.target);
        console.log("back id: " + localId);
        let embeddedWindow = document.getElementById("windowContent-" + localId);
        console.log("changing URL to: " + lastBrowserFrame);
        embeddedWindow.src = lastBrowserFrame;
        document.getElementById("windowContent-" + localId);
        // This finds the URL bar and sets it to the URL
        findObjectWithClassAndId("browserURLbar", localId).value = embeddedWindow.src;
      };

      // This contains the back button and has the boarder line
      let menuBarButtonsBack = document.createElement("div");
      menuBarButtonsBack.className = "menuBarButtons";
      menuBarButtonsBack.appendChild(menuBarButtonsBackIcon);

      // This creates the forward button image and makes it go forwards when clicked
      let menuBarButtonsForwardIcon = document.createElement("img");
      menuBarButtonsForwardIcon.src = "resources/go-next-symbolic.svg";
      menuBarButtonsForwardIcon.width = 20;
      menuBarButtonsForwardIcon.height = 20;
      menuBarButtonsForwardIcon.onclick = function(event) {
        let localId = findId(event.target);
        console.log("forward id: " + localId);
        let embeddedWindow = document.getElementById("windowContent-" + localId);
        console.log("changing URL to: " + nextBrowserFrame);
        embeddedWindow.src = nextBrowserFrame;
        // This finds the URL bar and sets it to the URL
        findObjectWithClassAndId("browserURLbar", localId).value = embeddedWindow.src;
      };

      // This contains the forwards button and has the boarder line
      let menuBarButtonsForward = document.createElement("div");
      menuBarButtonsForward.className = "menuBarButtons";
      menuBarButtonsForward.appendChild(menuBarButtonsForwardIcon);

      // This contains both the forwards and back buttons
      let menuBarButtons = document.createElement("div");
      menuBarButtons.className = "menuBarButtonsContainer";
      menuBarButtons.appendChild(menuBarButtonsBack);
      menuBarButtons.appendChild(menuBarButtonsForward);

      // This is the url/search box and sets up so it can be changed
      let menuBarTitleURL = document.createElement("INPUT");
      menuBarTitleURL.type = "text";
      menuBarTitleURL.readOnly = false;
      menuBarTitleURL.contentEditable = true;
      menuBarTitleURL.className = "browserURLbar";
      menuBarTitleURL.defaultValue = url;
      menuBarTitleURL.onclick = function(e) {
        // The input cannot be selected without this for some reason
        e.target.select();
      };
      // We use this to listen for the enter key being pressed
      menuBarTitleURL.onkeydown = function(event) {
        var windowId = findId(event.target);
        console.log("Id of clicked browser URL bar: " + windowId);
        // We go to the URL if the user hits enter
        if(event.key == "Enter") {
          console.log("The enter button has been pressed!");
          var embeddedWindow = document.getElementById("windowContent-" + windowId);
          // We warn the user of the cross site scripting risk
          if(!confirm("Security Risk!\n Visiting external sites in this browser is a security risk!\n Are you sure you wish to continue?")) {
            return;
          }
          // We set this so that we can later go back to the old page
          lastBrowserFrame = embeddedWindow.src;
          console.log("lastBrowserFrame set as: " + lastBrowserFrame);
          // This detects if the user entered a real URL, if not we Google what they typed
          if(event.target.value.includes("http")) {
            // If its a valid url
            console.log("The user has entered a valid URL: " + event.target.value);
            // Take the iframe to the new URL
            embeddedWindow.src = event.target.value;
            // This is set so that if we go back then forward we end up in the right place
            nextBrowserFrame = event.target.value;
            console.log("nextBrowserFrame set as: " + nextBrowserFrame);
          } else {
            // Else the URL is not valid, so we Google what they typed
            // This is the formatting Google use in their search URLs
            search = event.target.value.replaceAll(" ", "+");
            console.log("Navigating to Google Search for: " + search);
            nextBrowserFrame = "https://www.google.com/search?igu=1" + "&q=" + search;
            console.log("nextBrowserFrame set as: " + nextBrowserFrame);
            // This takes the iframe to the new URL
            embeddedWindow.src = "https://www.google.com/search?igu=1" + "&q=" + search;
          }
        }
      };

      // This is the container for the URL bar
      let menuBarTitle = document.createElement("div");
      menuBarTitle.className = "menuBarTitle";
      menuBarTitle.appendChild(menuBarTitleURL);

      // This spawns a new window with our arguments
      const id = newWindow(menuBarButtons, menuBarTitle, url, "");

      // This makes a new taskbar entry for the program
      newTask("resources/web-browser.png", "Web Browser", id);
    }


    // This function opens a weather app/info page made by Harvey Mcglashan
    // The windows are basically just embedded .html to make it easy for other group members to add content
    // Its a shame no other group members bothered!
    function newWeatherPage() {
      let programContent = "Group Member Content/Harvey Mcglashan/weather.html";
      let programArguments = "";
      
      // We don't have any custom buttons for the weather app/page
      let menuBarButtons = document.createElement("div");
      menuBarButtons.className = "menuBarFileButtonsContainer";

      // This creates the title which is just "Weather Info"
      menuBarTitle = document.createElement("div");
      menuBarTitle.className = "menuBarTitle";
      menuBarTitle.innerHTML = "Weather Info";
      
      const id = newWindow(menuBarButtons, menuBarTitle, programContent, programArguments);
      // This makes a new taskbar entry for the program
      newTask("resources/weather-showers-scattered.png", "Weather Info", id);
    }


    // This function centers a window in the middle of the desktop area, or close to it anyway
    function centerWindow(id) {
      desktopArea = document.getElementById("main");
      targetWindow = document.getElementById("window-" + id);
      targetWindow.style.top = ((desktopArea.clientHeight / 2) - (targetWindow.clientHeight/2)) + "px";
      targetWindow.style.left = ((desktopArea.clientWidth / 2) - (targetWindow.clientWidth/2)) + "px";
    }


    // This function opens the welcome page which explains exactly what the website is
    function newWelcomePage() {
      let programContent = "welcomePage.html";
      let programArguments = "";
      
      // We don't have any custom buttons for the welcome page
      let menuBarButtons = document.createElement("div");
      menuBarButtons.className = "menuBarFileButtonsContainer";

      // This creates the title which is simply "Welcome to UoM Linux"
      menuBarTitle = document.createElement("div");
      menuBarTitle.className = "menuBarTitle";
      menuBarTitle.innerHTML = "Welcome to Mini UoM Linux";
      
      const id = newWindow(menuBarButtons, menuBarTitle, programContent, programArguments);
      // This makes a new taskbar entry for the program
      newTask("resources/text-html.png", "Welcome", id);

      // Center the window in the middle of the desktop
      centerWindow(id);
    }

    // This creates the buttons that shows the current and previous directory for the file explorer
    // and also creates the back and forwards buttons
    function generateNavigationButtons(path) {

      console.log("The path given to generateNavigationButtons(): " + path);
      // This code gives the names of the current and previous directories (without /'s)
      let temp = path.substring(path.lastIndexOf("/"));
      console.log("temp: " + temp);
      let currentDirectoryName = temp.substring(temp.lastIndexOf("/")+1);
      let currentDirectory = path;

      let end = path.lastIndexOf("/");
      let chopped = path.substring(0, end);
      console.log("chopped: " + chopped);
      let begin = chopped.lastIndexOf("/");

      let parentDirectory = path.substring(end);
      let parentDirectoryName = path.substring(begin+1, end);
      if(chopped == "" && currentDirectoryName != "") {
        parentDirectoryName = "/";
      }

      // This code loves to not work, so I have left this in for troubleshooting
      /*
      console.log("genNav: currentDirectory: " + currentDirectory);
      console.log("genNav: currentDirectoryName: " + currentDirectoryName);
      console.log("genNav: parentDirectory: " + parentDirectory);
      console.log("genNav: parentDirectoryName: " + parentDirectoryName);
      */

      // This is the code that generates the back button and sets its onclick
      let backButtonContainer = document.createElement("div");
      backButtonContainer.className = "menuBarButtons";
      let backButtonIcon = document.createElement("img");
      backButtonIcon.src = "resources/go-previous-symbolic.svg";
      backButtonIcon.width = 20;
      backButtonIcon.height = 20;
      backButtonContainer.appendChild(backButtonIcon);
      backButtonIcon.onclick = function(event) {
        let localId = findId(event.target);
        console.log("This explorer window should navigate back: " + localId);
        let embeddedWindow = document.getElementById("windowContent-" + localId);
        // If we go back and there is nothing to go back to, it will go back on a different window, because browsers are cursed
        if(embeddedWindow.contentWindow.name != "/") {
          console.log("We can go back!");
          embeddedWindow.contentWindow.history.back();
        }
      };

      // This is the code that generates the forwards button and sets its onclick
      let forwardsButtonContainer = document.createElement("div");
      forwardsButtonContainer.className = "menuBarButtons";
      let forwardsButtonIcon = document.createElement("img");
      forwardsButtonIcon.src = "resources/go-next-symbolic.svg";
      forwardsButtonIcon.width = 20;
      forwardsButtonIcon.height = 20;
      forwardsButtonContainer.appendChild(forwardsButtonIcon);
      forwardsButtonIcon.onclick = function(event) {
        let localId = findId(event.target);
        console.log("This explorer window should navigate forwards: " + localId);
        let embeddedWindow = document.getElementById("windowContent-" + localId);
        // If we go forward and there is nothing to go forward to, it will go forward on a different window, because browsers are cursed
        if(embeddedWindow.contentWindow.name != "/") {
          console.log("We can go forward!");
          embeddedWindow.contentWindow.history.forward();
        }
      };

      // This is the button/indicator that shows the parent directory
      let parentDirectoryButton = document.createElement("div");
      parentDirectoryButton.className = "menuBarButtons";
      // Since / is our home directory
      if(parentDirectoryName == "/") {
        parentDirectoryButton.innerHTML = "Home";
      } else {
        parentDirectoryButton.innerHTML = parentDirectoryName;
      }

      // This is the button/indicator that shows the current directory
      let currentDirectoryButton = document.createElement("div");
      currentDirectoryButton.className = "menuBarButtons";
      // This deals with an odd edge case
      if(currentDirectoryName == "") {
        currentDirectoryButton.innerHTML = "Home";
      } else {
        currentDirectoryButton.innerHTML = currentDirectoryName;
      }

      // This contains all of the generated buttons
      let navigationButtons = document.createElement("div");
      navigationButtons.className = "menuBarFileButtonsContainer";
      navigationButtons.style.float = "left";
      navigationButtons.style.marginLeft = "10px";

      navigationButtons.appendChild(backButtonContainer);
      if(parentDirectoryName != "") {
        // Since / is our root directory we don't add the parent directory button when navigating home
        navigationButtons.appendChild(parentDirectoryButton);
      }

      // This is the left most back button, it does the same as the other one
      let menuBarButtonsBack = document.createElement("div");
      menuBarButtonsBack.className = "menuBarButtons";
      let menuBarButtonsBackIcon = document.createElement("img");
      menuBarButtonsBackIcon.src = "resources/go-previous-symbolic.svg";
      menuBarButtonsBackIcon.width = 20;
      menuBarButtonsBackIcon.height = 20;
      menuBarButtonsBack.appendChild(menuBarButtonsBackIcon);
      menuBarButtonsBackIcon.onclick = function(event) {
        let localId = findId(event.target);
        console.log("This explorer window should navigate back: " + localId);
        let embeddedWindow = document.getElementById("windowContent-" + localId);
        // If we go back and there is nothing to go back to, it will go back on a different window, because browsers are cursed
        if(embeddedWindow.contentWindow.name != "/") {
          console.log("We can go back!");
          embeddedWindow.contentWindow.history.back();
        }
      };

      // This is the left most forward button, it does the same as the other one
      let menuBarButtonsForwards = document.createElement("div");
      menuBarButtonsForwards.className = "menuBarButtons";
      let menuBarButtonsForwardsIcon = document.createElement("img");
      menuBarButtonsForwardsIcon.src = "resources/go-next-symbolic.svg";
      menuBarButtonsForwardsIcon.width = 20;
      menuBarButtonsForwardsIcon.height = 20;
      menuBarButtonsForwards.appendChild(menuBarButtonsForwardsIcon);
      menuBarButtonsForwardsIcon.onclick = function(event) {
        let localId = findId(event.target);
        console.log("This explorer window should navigate forwards: " + localId);
        let embeddedWindow = document.getElementById("windowContent-" + localId);
        // If we go forward and there is nothing to go forward to, it will go forward on a different window, because browsers are cursed
        if(embeddedWindow.contentWindow.name != "/") {
          console.log("We can go forward!");
          embeddedWindow.contentWindow.history.forward();
        }
      };

      // This is where the left most back and forward buttons go
      let menuBarButtons = document.createElement("div");
      menuBarButtons.className = "menuBarButtonsContainer";
      menuBarButtons.appendChild(menuBarButtonsBack);
      menuBarButtons.appendChild(menuBarButtonsForwards);

      navigationButtons.appendChild(currentDirectoryButton);
      navigationButtons.appendChild(forwardsButtonContainer);
      menuBarButtons.appendChild(navigationButtons);

      return menuBarButtons;
    }


    // This creates a new pdf browser window given the path of a file
    // pdf windows are simply passing the pdf content through to the browser for it to handle
    function newPDFwindow(filepath) {

      // There is sometimes an issue where there are too many /'s and we also need to remove the first /
      filepath = filepath.replaceAll("//", "/").substring(1);
      console.log("PDF file to open: " + filepath);

      // We don't have any custom buttons for pdf windows, its all handled by the browser
      let menuBarButtons = document.createElement("div");
      menuBarButtons.className = "menuBarFileButtonsContainer";

      // This creates the title which is simple the path to the file
      let menuBarTitle = document.createElement("div");
      menuBarTitle.className = "menuBarTitle";
      menuBarTitle.innerHTML = filepath;

      // We set the URL for the iframe to use as the PDF files path
      let programContent = filepath;
      let programArguments = "";

      // This spawns a new window with our arguments
      const id = newWindow(menuBarButtons, menuBarTitle, programContent, programArguments);
      
      // This makes a new taskbar entry for the program
      newTask("resources/x-office-document.png", "PDF Reader", id);
    }


    // This creates a new image browser window given the path of a file
    // image windows are simply passing the image content through to the browser for it to handle
    function newPictureWindow(filepath) {

      // There is sometimes an issue where there are too many /'s and we also need to remove the first /
      filepath = filepath.replaceAll("//", "/").substring(1);
      console.log("picture file to open: " + filepath);

      // We don't have any custom buttons for image viewer windows, its all handled by the browser
      let menuBarButtons = document.createElement("div");
      menuBarButtons.className = "menuBarFileButtonsContainer";

      // This creates the title which is simple the path to the file
      let menuBarTitle = document.createElement("div");
      menuBarTitle.className = "menuBarTitle";
      menuBarTitle.innerHTML = filepath;

      // We set the URL for the iframe to use as the image files path
      let programContent = filepath;
      let programArguments = "";

      // This spawns a new window with our arguments
      const id = newWindow(menuBarButtons, menuBarTitle, programContent, programArguments);
      // This makes a new taskbar entry for the program
      newTask("resources/x-office-drawing.png", "Picture", id);
    }


    function newDocumentWindow(filepath) {

      // There is sometimes an issue where there are too many /'s
      filepath = filepath.replaceAll("//", "/");

      // This creates the "open" text and makes it open a new file explorer if clicked on
      let menuBarButtonsText = document.createElement("div");
      menuBarButtonsText.className = "menuBarButtons";
      menuBarButtonsText.innerHTML = "Open";
      menuBarButtonsText.onclick = function() {
        newExplorerWindow("/");
      }

      // This creates the icon that goes in the open button
      let menuBarButtonsIcon = document.createElement("img");
      menuBarButtonsIcon.className = "menuBarButtons";
      menuBarButtonsIcon.src = "resources/pan-down-symbolic.svg";

      // This is the container for the button and text for the open button
      let menuBarButtons = document.createElement("div");
      menuBarButtons.className = "menuBarFileButtonsContainer";
      menuBarButtons.appendChild(menuBarButtonsText);
      menuBarButtons.appendChild(menuBarButtonsIcon);

      // This makes the text that shows the name of the file that has been opened
      let menuBarTitleName = document.createElement("div");
      menuBarTitleName.className = "menuBarTitleName";
      documentTitle = filepath.substring(filepath.lastIndexOf("/")+1, filepath.indexOf("."));
      menuBarTitleName.innerHTML = documentTitle;

      // This makes the text that shows the path of the file that has been opened
      let menuBarTitlePath = document.createElement("div");
      menuBarTitlePath.className = "menuBarTitlePath";
      menuBarTitlePath.innerHTML = "~" + filepath;

      // This contains the title and path of the file thats open
      let menuBarTitle = document.createElement("div");
      menuBarTitle.className = "menuBarTitle";
      menuBarTitle.appendChild(menuBarTitleName);
      menuBarTitle.appendChild(menuBarTitlePath);

      // This sets the URL of the iframe
      let programContent = "textedit.html";
      // This will contain the path of the file we want to open, this is put in the name of the iframe window
      let programArguments = "directory=" + filepath;
      console.log("TextEdit given args: " + programArguments);

      // This spawns a new window with our arguments
      const id = newWindow(menuBarButtons, menuBarTitle, programContent, programArguments);
      // This makes a new taskbar entry for the program
      newTask("resources/accessories-text-editor.png", "Document", id);
    }



    // This function runs whenever the iframe of a window has a changed URL
    // This happens when an explorer window navigates to a new directory or
    // when the welcome window closes. This function is used to generate 
    // new navigation buttons so that they work when next pressed and to allow
    // the welcome page to open a new file explorer when it's closed
    function windowUpdate(localId) {
      console.log("a window has a new URL. window ID: " + localId);
     
      // This gets the window that has been clicked
      let embeddedWindow = document.getElementById("windowContent-" + localId);
      let url = new URL(embeddedWindow.src);

      // If the windows new URL is not the same as the main domain we don't care about any updates
      if(url.hostname !== window.location.hostname) {
        return;
      }

      console.log("Window navigated to: " + embeddedWindow.contentWindow.location.pathname.toString());

      // If the window has changed its URL to the cat this signals to close the window
      // This is a bit of a hack, ideally I would make the programs call each other or use
      // the messaging system, but this is way easier, and more fun!

      // We also open a file explorer as this is currently only used by the welcome screen
      // and we want the file explorer to open when they finish the welcome/tutorial screen
      if(embeddedWindow.contentWindow.location.pathname.toString().endsWith("/resources/cat.webp")) {
        closeWindow(localId);
        newExplorerWindow("/");
        return;
      }

      // This is so that we ignore any non-explorer windows when they change URL
      if(!embeddedWindow.contentWindow.location.pathname.toString().includes("/explorer.html")) {
        console.log("non-explorer window updated, ignoring!");
        return;
      }

      // This gets the filepath of the current window from the name of the embedded window
      let path = embeddedWindow.contentWindow.name;

      // If the path is of a file we open the file in a new window and tell the explorer to go back to where it was
      if(path.includes(".")) {
        console.log("The user wants to open a file with a path of: " + path);
        openFile(path);

        // We need to send the iframe back to its previous URL
        embeddedWindow.contentWindow.history.back();

      } else {
        // If we aren't dealing with a file we will need to update the navigation buttons and directory names
        console.log("The user wants to open a folder with a path of: " + path);
        console.log("Replacing navigation buttons and names...");
        // We make new nav buttons/directory names
        let newNavButtons = generateNavigationButtons(path);
        // We set the id of the nav buttons/directory names so other functions can find them
        newNavButtons.id = "customMenuBarButtons-" + localId;
        let navButtonsParent = document.getElementById("menuBarCustomIconsContainer-" + localId);
        navButtons = document.getElementById("customMenuBarButtons-" + localId);

        // We remove the old nav buttons/directory names
        navButtonsParent.removeChild(navButtons);
        // We insert the new nav buttons/directory names
        navButtonsParent.appendChild(newNavButtons);
      }
    }


    // This opens the given file in the appropriate program
    function openFile(filepath) {
      console.log("Path of file to be opened in some program: " + filepath);
      if(filepath.includes(".txt")) {
        console.log("The file should be opened in a text editor");
        newDocumentWindow(filepath);
      } else if (filepath.includes(".url")) {
        console.log("The file should be opened in a web browser");
        newBrowserWindow(filepath);
      } else if (filepath.includes(".pdf")) {
        console.log("The file should be opened in a PDF reader");
        newPDFwindow(filepath);
      } else if (filepath.includes(".png")) {
        console.log("The file should be opened in a image reader");
        newPictureWindow(filepath);
      } else if (filepath.includes(".jpg")) {
        console.log("The file should be opened in a image reader");
        newPictureWindow(filepath);
      } else if (filepath.includes(".mp3")) {
        console.log("The .mp3 should be opened in a browser");
        newBrowserWindow(filepath)
      } else if (filepath.includes(".rain")) {
        console.log("The .rain should be opened in the weather app/info");
        newWeatherPage();
      } else {
        console.log("The file type is unsupported!");
      }
    }


    // This creates a new window given what buttons it should have, what title, what URL, and any special arguments
    function newWindow(customMenuBarButtons, customMenuBarTitle, programContent, programArguments) {

      // The ID of this program is based on the current time so its always unique
      const id = Date.now();
      console.log("New window ID: " + id);

      // This sets how large the window is to be by default
      let windowWidth = 800;
      let windowHeight = 500;

      // If the user is using a mobile browser windows should be smaller
      if(/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
        windowWidth = 500;
        windowHeight = 300;
      }

      // This is the iframe where programs are embedded into
      let embeddedWindow = document.createElement("iframe");
      // This no longer seems to be necessary
      // The sandbox had to be disabled as otherwise pdf files will not load in chromium based browsers due to a bug
      // which is why there is a warning if you try to navigate by manually setting a URL in the browser
      // embeddedWindow.sandbox = "allow-modals allow-forms allow-scripts allow-popups allow-same-origin allow-top-navigation-by-user-activation";
      let embeddedWindowId = "windowContent-" + id;
      embeddedWindow.id = embeddedWindowId;
      embeddedWindow.className = "embeddedProgram";
      // Program arguments are encodes into the URL
      embeddedWindow.src = programContent + "?" + programArguments;
      embeddedWindow.frameborder = "0";
      // If the window changes URL a function will be called to figure out what to do
      embeddedWindow.onload = function() { windowUpdate(id); };

      // This makes sure that we don't have any padding or a margin
      embeddedWindow.style.margin = "0px";
      embeddedWindow.style.padding = "0px";

      // This creates the minimize button and sets its onclick
      let menuBarMin = document.createElement("img");
      menuBarMin.className = "menuBarControlButtons";
      menuBarMin.src = "resources/window-minimize-symbolic.svg";
      menuBarMin.onclick = function(event) {
        eventId = findId(event.target);
        console.log("This window is to be minimized: " + eventId);
        programWindow = document.getElementById("window-" + eventId);
        programWindow.style.display = "none";
      };

      // This creates the maximize button and sets its onclick
      let menuBarMax = document.createElement("img");
      menuBarMax.className = "menuBarControlButtons";
      menuBarMax.src = "resources/window-maximize-symbolic.svg";
      // This makes the window as large as it can be and centers it
      menuBarMax.onclick = function(event) {
        let eventId = findId(event.target);
        console.log("This window is to be maximized: " + eventId);
        let programWindow = document.getElementById("window-" + eventId);
        if(parseInt(programWindow.style.width) > 900) {
          // If the window is already maximized this will shrink it
          programWindow.style.width = 800;
          programWindow.style.height = 500 - 30 - 40; //-30 and -40 account for the top menu and taskbar
        } else {
          programWindow.style.width = innerWidth;
          programWindow.style.height = innerHeight - 30 - 40; //-30 and -40 account for the top menu and taskbar
          programWindow.style.top = 30;
          programWindow.style.left = 0;
        }
      };

      // This creates the minimize button and sets its onclick
      let menuBarExit = document.createElement("img");
      menuBarExit.className = "menuBarControlButtons";
      menuBarExit.src = "resources/window-close-symbolic.svg";
      // This function finds the root of the window and then deletes it (it closes the window)
      menuBarExit.onclick = function(event){
        windowId = findId(event.target);
        console.log("This window is to be removed: " + windowId);
        closeWindow(windowId);
      }

      // This creates the container of the min/max/close buttons
      let menuBarIconContainer = document.createElement("div");
      menuBarIconContainer.style.float = "right";
      menuBarIconContainer.style.height = "30px";
      menuBarIconContainer.className = "menuBarControlButtonsContainer";
      menuBarIconContainer.style.cursor = "default";

      menuBarIconContainer.appendChild(menuBarMin);
      menuBarIconContainer.appendChild(menuBarMax);
      menuBarIconContainer.appendChild(menuBarExit);

      // This creates the container of the custom program buttons such as the browsers back and forward buttons
      let menuBarCustomIconsContainer = document.createElement("div");
      menuBarCustomIconsContainer.id = "menuBarCustomIconsContainer-" + id;
      menuBarCustomIconsContainer.style.float = "left";
      menuBarCustomIconsContainer.style.height = "30px";

      // We add the program specific icons to this window (specified in function arguments)
      customMenuBarButtons.id = "customMenuBarButtons-" + id;
      menuBarCustomIconsContainer.appendChild(customMenuBarButtons);

      // This is the top bit of the window between the custom buttons and the program min/max/exit buttons
      // This is the bit which the user can click and hold down and then move their mouse to drag the window
      let menuBarMoveObject = document.createElement("div");
      let draggableWindowHeaderId = "draggableWindowHeader-" + id;
      menuBarMoveObject.id = draggableWindowHeaderId
      menuBarMoveObject.className = "draggableWindowHeader";
      menuBarMoveObject.style.minWidth = "10px;";
      menuBarMoveObject.style.width = "100%";
      menuBarMoveObject.style.height = "40px";

      // We add the program specific title to it (specified in function arguments)
      // e.g in text edit this would be the file name and the path to the file
      menuBarMoveObject.appendChild(customMenuBarTitle);

      // This will contain all the custom buttons, the title area, and the min/max/exit buttons
      let menuBarContainer = document.createElement("div");

      let menuBarContainerId = "windowMenuBar-" + id;
      menuBarContainer.id = menuBarContainerId;
      menuBarContainer.className = "windowMenuBar"

      menuBarContainer.appendChild(menuBarCustomIconsContainer);
      menuBarContainer.appendChild(menuBarIconContainer);
      menuBarContainer.appendChild(menuBarMoveObject);

      // This creates the child of the window object
      // This exists so that the gap between it and its parent can be used for expanding/shrinking the window
      let draggableObjectId = "draggableWindow-" + id;
      let innerWindowHTML = document.createElement("div");
      innerWindowHTML.id = draggableObjectId;
      innerWindowHTML.className = "draggableWindowInner";
      innerWindowHTML.appendChild(menuBarContainer);
      innerWindowHTML.appendChild(embeddedWindow);

      // If the user is on a mobile browser the padding needs to be bigger so they can resize
      innerWindowHTML.style.padding = "5px";
      if(/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
        innerWindowHTML.style.padding = "15px";
      }

      // This creates the main window object, this is the parent of all the window content
      // The bit of this div that is exposed acts as the area you drag to expand or shrink it
      let windowHTML = document.createElement("div");
      let windowHTMLId = "window-" + id;
      windowHTML.className = "draggableWindow";
      windowHTML.id = windowHTMLId;
      windowHTML.style.position = "absolute";
      windowHTML.style.cursor = "n-resize";
      windowHTML.style.background = "#F2F2F2";
      windowHTML.style.width = windowWidth;
      windowHTML.style.height = windowHeight;
      // This puts the new window above everything else so its in focus
      windowHTML.style.zIndex = findHighestZIndex() + 1;

      windowHTML.appendChild(innerWindowHTML);

      let mainPage = document.getElementById("main");
      // This adds the new window to the main page
      mainPage.appendChild(windowHTML);

      // This executes the code that makes this window movable
      // the first argument is the window that is to be moved
      // the second argument is the area in which if we click and hold we can drag the window
      dragElement(document.getElementById(windowHTMLId), document.getElementById(draggableWindowHeaderId));

      // This executes the code that makes this window expandable and shrinkable
      // the first argument is the area that is to be expanded/shrunk
      // the second argument is the area in which if we click and hold we can resize the window
      expandShrinkElement(document.getElementById(windowHTMLId), document.getElementById(draggableObjectId));

      return id;
    }


    // This closes/removes a window and removes its entry in the taskbar
    function closeWindow(id) {
      document.getElementById("window-" + id).remove();
      document.getElementById("taskId-" + id).remove();
    }


    // This creates a task and puts it on the taskbar
    function newTask(icon, text, windowID) {

      console.log("We are adding a program to the taskbar with this id: " + windowID);
      let taskbar = document.getElementById("tasks_container");
      let taskContainer = document.createElement("div");
      taskContainer.className = "task_container";
      let taskId = "taskId-" + windowID;
      console.log("The new task is to be assigned the ID: " + taskId);
      taskContainer.id = taskId
      // If a task is clicked on it will put its associated window in focus
      taskContainer.onclick = function() {
        focusWindow(windowID);
      };

      // This sets up the task icon
      let taskIcon = document.createElement("img");
      taskIcon.src = icon;
      taskIcon.className = "task_icon";
      // If a task is clicked on it will put its associated window in focus
      taskIcon.onclick = function() {
        focusWindow(windowID);
      };
      // This sets up the name of the task
      let taskText = document.createElement("div");
      taskText.className = "task_text";
      taskText.innerHTML = text;
      // If a task is clicked on it will put its associated window in focus
      taskText.onclick = function() {
        focusWindow(windowID);
      };
      // This adds the task name and task icon to the task container
      taskContainer.appendChild(taskIcon);
      taskContainer.appendChild(taskText);

      // This adds the new task to the taskbar
      taskbar.appendChild(taskContainer);
    }


    // This function will check its parent, then its parent, then its parent, until it finds a numeric id
    function findId(element) {
      let parent = element;
      while(parent.id.replace(/[^0-9]/g, "") == "") {
        parent = parent.parentNode;
      }
      console.log("an id for this window has been found: " + parent.id);
      return parseInt(parent.id.replace(/[^0-9]/g, ""));
    }


    // Given a class name it will find the ID of a parent and if it matches it will return that object
    // This is used to get the object of the title bar in the browser, it doesn't have an ID but its parent
    // does, and we need to make sure we get the right browser title
    function findObjectWithClassAndId(className, searchId) {
      let searchPool = document.getElementsByClassName(className);
      for(i=0; i < searchPool.length; i++) {
        if(findId(searchPool[i]) == searchId) {
          return searchPool[i];
        }
      }
    }


    // This is used so that we don't select other windows or their iframes while dragging or resizing
    function makeAllWindowsUnselectable() {
      let parentWindows = document.getElementsByClassName("draggableWindow");
      for(i=0; i < parentWindows.length; i++) {
        parentWindows[i].style.pointerEvents = "none";
      }
      let embeddedWindows = document.getElementsByClassName("embeddedProgram");
      for(i=0; i < embeddedWindows.length; i++) {
        embeddedWindows[i].style.pointerEvents = "none";
      }
    }


    // This makes all windows selectable again
    function makeAllWindowsSelectable() {
      let parentWindows = document.getElementsByClassName("draggableWindow");
      for(i=0; i < parentWindows.length; i++) {
        parentWindows[i].style.pointerEvents = "all";
      }
      let embeddedWindows = document.getElementsByClassName("embeddedProgram");
      for(i=0; i < embeddedWindows.length; i++) {
        embeddedWindows[i].style.pointerEvents = "all";
      }
    }


    // This sets up the object so that it can be dragged
    // The first argument is the object that is to be moved
    // The second argument is the area in which if we click and hold we can drag the object
    // This function is a modification of https://stackoverflow.com/questions/4585571/drag-and-drop-feature-in-javascript (the solution not question)
    function dragElement(element, elementTrigger) {
      console.log("This element is to be setup to allow dragging: " + element.id);
      let dragId = "";
      let pos1 = 0;
      let pos2 = 0;
      let pos3 = 0;
      let pos4 = 0;

      elementTrigger.onpointerdown = dragMouseDown;

      // This triggers when the mouse is being held down over the object
      function dragMouseDown(event) {

        let dragId = findId(event.srcElement);
        console.log("window with this id is to be dragged: " + dragId);

        event.preventDefault();
        // This gets the cursor position when they started holding down
        pos3 = event.clientX;
        pos4 = event.clientY;

        // This is so that the user can select the search bar in the browser
        if(event.target.className == "browserURLbar") {
          return;
        }

        // If the user is dragging an icon and not a window then this will error out
        try {
          // While we are dragging we don't want to user to accidentally select the window content
          // If the user accidentally navigates to the iframe document.onpointerup doesn't work
          makeAllWindowsUnselectable();

          // This will only run if its not an icon, if it was it would have errored
          // This puts the window being moved into focus
          focusWindow("window-" + dragId);

        } catch(e) {
          console.log("The user is dragging an icon so we shouldn't make an iframe un-clickable: " + e)
        }

        // When the mouse is un-clicked we stop moving
        document.onpointerup = closeDragElement;
       // When the mouse moves we need to move the window
        document.onpointermove = elementDrag;
      }

      // This triggers while the mouse is held down and the mouse is moving
      // Logging in this function can reduce performance, so its commented out when not debugging
      function elementDrag(event) {
        //console.log("Draggable object being dragged: " + dragId);

        event.preventDefault();
        pos1 = pos3 - event.clientX;
        pos2 = pos4 - event.clientY;
        pos3 = event.clientX;
        pos4 = event.clientY;

        //console.log("new top: " + (element.offsetTop - pos2) + "px");
        //console.log("new left: " + (element.offsetLeft - pos1) + "px");
        // This sets the objects new position:
        element.style.top = (element.offsetTop - pos2) + "px";
        element.style.left = (element.offsetLeft - pos1) + "px";
      }

      function closeDragElement(event) {
        // When the mouse is released we stop and reset back to where we were
        document.onpointerup = null;
        document.onpointermove = null;

        // If the user is dragging an icon and not a window then this will error out
        try {
          // We let the user select objects in the window now we are done dragging
          makeAllWindowsSelectable();
          console.log("The user has stopped dragging a window");
        } catch(e) {
          console.log("The user has stopped dragging an icon: " + e);
        }
      }
    }


    // This executes the code that makes this window expandable and shrinkable
    // the first argument is the area that is to be expanded/shrunk
    // the second argument is the area in which if we click and hold we can resize the window
    // This function is a heavy modification of https://stackoverflow.com/questions/4585571/drag-and-drop-feature-in-javascript (the solution not question)
    function expandShrinkElement(element, triggerElement) {

      let resizeId = "";
      console.log("This element is to be setup to allow resizing: " + element.id);

      // This gets the size of the window as a rectangle
      let rect = element.getBoundingClientRect();
      let beforeX = rect.left;
      let beforeY = rect.top;
      console.log(rect.top, rect.right, rect.bottom, rect.left);

      triggerElement.onpointerdown = expandShrinkMouseDown;

      // This triggers when the mouse is clicked down
      function expandShrinkMouseDown(event) {
        console.log("The window clicked on in the resize area: " + event.target.id);
        event.preventDefault();
        resizeId = event.target.id.replace("draggableWindow-", "");
        console.log("we need to resize the window with this id: " + resizeId);

        if(event.target != event.currentTarget) {
          console.log("we have the wrong window")
          return; // This is so that the drag window works, otherwise the listener for dragging and the listener for resizing both run at the same time
        }

        // Since its being resized it should be the window in focus
        focusWindow("window-" + resizeId);

        // While we are resizing we don't want to user to accidentally select the window content
        // If the user accidentally navigates to the iframe, document.onpointerup doesn't work
        makeAllWindowsUnselectable();

        // When the mouse is un-clicked we stop resizing
        document.onpointerup = closeExpandShrinkElement;
        // When the mouse moves we need to resize the window
        document.onpointermove = elementExpandShrink;
      }

      // This triggers when the mouse moves and the mouse is clicked
      // Logging in this function can reduce performance, so its commented out when not debugging
      function elementExpandShrink(event) {
        let programWindow = document.getElementById("window-" + resizeId);
        //console.log("window id that is to be resized: " + programWindow.id);
        event.preventDefault();
        let rect = element.getBoundingClientRect();

        let windowWidth = programWindow.clientWidth;
        let windowHeight = programWindow.clientHeight;

        let currentX = rect.left;
        let currentY = rect.top;
        let pointerX = event.pageX;
	      let pointerY = event.pageY;

        let changeInX = pointerX - (windowWidth + currentX);
        let changeInY = pointerY - (windowHeight + currentY);
        //console.log("Change in cursor X: " + changeInX);
        //console.log("Change in cursor Y: " + changeInY);

        let newWidth = changeInX + windowWidth;
        let newHeight = changeInY + windowHeight;
        //console.log("new window height: " + newHeight);
        //console.log("new window width: " + newWidth);

        programWindow.style.width = newWidth;
        programWindow.style.height = newHeight;
      }

      function closeExpandShrinkElement() {
        // We need to stop resizing when the mouse is released
        console.log("The mouse has been released!");
        document.onpointerup = null;
        document.onpointermove = null;

        // We let the user select objects in the window now we are done resizing
        makeAllWindowsSelectable();
      }
    }


  </script>

    <body onload="onLoad()" id="main">

      <!-- The content URL should be set to the URL the site is hosted on -->
      <meta HTTP-EQUIV="Access-Control-Allow-Origin" CONTENT="personalpages.manchester.ac.uk"/>

      <!-- Disables zooming on mobile browsers -->
      <meta name="viewport" content="width=device-width, initial-scale=0.75, maximum-scale=0.75, user-scalable=no"/>

      <!-- This is the top status bar where the time, status, username, etc go -->
      <div id="topMenuBar">

        <!-- This container holds the items that go in the top menu bar -->
        <div id="topMenuBarContainer">

          <!-- This shows the current time, its updated in code to be up to date -->
          <div class="topMenuBarItem" id="systemClock">
            Thu 14:04
          </div>

          <!-- This holds the volume icon, its just for show -->
          <div class="topMenuBarItem" style="padding-top: 8px;">
            <img src="resources/audio-volume-medium-symbolic.svg">
            </img>
          </div>

          <!-- This holds the shutdown icon, its just for show -->
          <div class="topMenuBarItem" style="padding-top: 8px;">
            <img src="resources/system-shutdown-symbolic.svg">
            </img>
          </div>

          <!-- This holds the username, its just for show -->
          <div class="topMenuBarItem">
            Harvey Lelliott
          </div>

        </div>

      </div>

      <!-- File Explorer Home Desktop Icon -->
      <!-- You can add more of these if you want they will automatically be draggable, just make sure you set the paths correctly -->
      <div id="something unique 1" class="desktopIcon" path="/" style="top: 40px;">
        <img src="resources/user-home.png" class="desktopIconIcon">
        </img>
        <div>
            Home
        </div>
      </div>

      <!-- readme.txt Document Desktop Icon -->
      <!-- You can add more of these if you want they will automatically be draggable, just make sure you set the paths correctly -->
      <div id="something unique 2" class="desktopIcon" path="/Desktop/readme.txt" style="top: 150px;">
        <img src="resources/text-x-generic.png" class="desktopIconIcon">
        </img>
        <div>
            readme.txt
        </div>
      </div>

      <!-- Taskbar -->
      <div id="taskbar_container">

        <!-- Taskbar tasks container -->
        <div id="tasks_container">
        </div>

      </div>

  </body>

  <style>

    /* This is the root element */
    #main {
      background-image: url("resources/wallpaper.jpg");
      background-repeat: no-repeat, repeat;
      background-position: center;
      background-size: cover;
      height: 100%;
      width: 100%;
      overflow: hidden;
      top:0;
      bottom: 0;
    }

    /* Window Styling */

      /* This is the styling for the root of a window */
      .draggableWindow {
        margin: 0px;
        padding: 0px;
        border-radius: 5px;
        box-shadow: 0px 0px 12px 0px #5f5f5f;
      }

      /* This is the styling for the container that holds the entire menu bar and the embedded window */
      .draggableWindowInner {
        margin: 0px;
        padding: 0px;
        width: 100%;
        height: 100%;
        box-sizing: border-box;
      }

      /* This is the styling for the part of a windows menu bar where you can click and hold to drag */
      .draggableWindowHeader {
        padding: 0px;
        margin: 0px;
        cursor: move;
        z-index: 10;
        color: #fff;
      }

      /* This is the styling for the iframe in the window */
      .embeddedProgram {
          background-color: #FEFEFE;
          object-fit: cover;
          margin: 0px;
          padding: 0px;
          border: none;
          width: 100%;
          height: calc(100% - 40px);
      }

      /* This is the styling for the menu bar that holds the custom buttons, window title, and min/max/exit buttons */
      .windowMenuBar {
        height: 40px;
        width: 100%;
      }

      /* This sets the theme of the custom buttons in the menu bar of any window */
      .menuBarButtons {
        float: left;
        background-color: #D5D5D3; /* Theme used in UOM linux */
        height: 20px;
        padding: 5px;
        font-family: 'Cantarell', sans-serif;
        font-weight: bold;
        border: 1px solid #ccc;
        border-radius: 6px;
        cursor: pointer;
      }

      /* When custom menu bar buttons in a window are clicked, this changes their colour */
      .menuBarButtons:active {
        background-color: #D5D5D5;
      }

      /* This holds all the custom menu buttons in a window */
      .menuBarButtonsContainer {
        display: inline-block;
        margin: 0px;
        padding: 0px;
        cursor: pointer;
      }

      /* This is the styling for the min/max/exit buttons in the menu bar */
      .menuBarControlButtons {
        float: left;
        cursor: pointer;
        height: 20px;
        padding: 5px;
      }

      /* This holds all the min/max/exit buttons in the menu bar */
      #menuBarControlButtonsContainer {
        float: right;
        border: 1px solid #d3d3d3;
        border-radius: 4px;
      }

      /* This styles the title seen in some windows such as the text editor */
      .menuBarTitle {
        text-align: center;
        color: black;
        font-weight: bold;
        font-family: 'Cantarell', sans-serif;
      }

      /* This is used specifically for the text editor so that it may have a differently styled file name and url path */
      .menuBarTitleName {
        color: black;
        font-weight: bold;
        font-family: 'Cantarell', sans-serif;
      }

      /* This is used specifically for the text editor so that it may have a differently styled file name and url path */
      .menuBarTitlePath {
        color: grey;
        font-family: 'Cantarell', sans-serif;
        font-size: smaller;
        font-weight: normal;
      }

      /* This is specific for the browser window. It makes the title selectable and adds a box around it */
      .browserURLbar {
        color: black;
        border: 1px solid grey;
        width: calc(100% - 280px);
        float: left;
        padding: 3px;
        margin: 5px;
        margin-left: 60px;
        cursor: text;
        user-select: all;
      }

    /* end of window styling */

    /* desktop styling */

      /* This is the styling for the icon part of the desktop icons */
      .desktopIconIcon {
        width: 80px;
        height: 80px;
      }

      /* This is the container for the desktop icon that holds the icon itself and the name */
      .desktopIcon {
          position: absolute;
          text-align: center;
          color: white;
          font-family: 'Cantarell', sans-serif;
      }

    /* end of desktop styling */

    /* top menu bar styling */

      /* This is the styling for the menu bar at the top of the screen */
      #topMenuBar {
        position: fixed;
        top: 0;
        left: 0;
        height: 30px;
        right: 0;
        background-image: linear-gradient(#F1F1F1, #E0E0E0);
      }

      /* This is the styling for the container of the top menu bar, it contains the time, vol, power, and username */
      #topMenuBarContainer {
        float: right;
        text-align: right;
      }

      /* This is the styling items in the top menu bar */
      .topMenuBarItem {
        vertical-align: top;
        display: inline-block;
        padding: 3px;
        font-family: 'Cantarell', sans-serif;
      }

    /* end of top menu bar styling */

    /* taskbar styling */

      /* This is the styling for the taskbar at the bottom */
      #taskbar_container {
        position: fixed;
        bottom: 0;
        left: 0;
        height: 40px;
        right: 0;
        background-image: linear-gradient(#F1F1F1, #E0E0E0);
      }

      /* This is the styling for the container that holds a tasks icon and name */
      .task_container {
        min-width: 50px;
        float: left;
        background-color: #ECECEC;
        border: solid 1px grey;
        border-radius: 6px;
        width: fit-content;
        margin: 2px;
      }

      /* This is the styling for the icon of a running task in the taskbar */
      .task_icon {
        float: left;
        padding: 2px;
        height: 30px;
        width: 30px;
      }

      /* This is the styling for the name of a running task in the taskbar */
      .task_text {
        float: left;
        padding: 4px;
        min-width: 150px;
        max-width: 300px;
        font-family: 'Cantarell', sans-serif;
      }

    /* end of taskbar styling */

  </style>

</html>
